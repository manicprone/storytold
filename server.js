import fs from 'fs';
import path from 'path';
import express from 'express';
import cookieParser from 'cookie-parser';
import bodyParser from 'body-parser';
import session from 'express-session';
import knex from 'knex';
import favicon from 'serve-favicon';
import LRU from 'lru-cache';
import compression from 'compression';
import dbSettings from './db/settings';
import serverConfig from './src/config/server-config';
import appConfig from './src/config/app-config';
import localAuthRoutes from './src/routers/auth';
import joint from './src/joint';

const DBStore = require('connect-session-knex')(session);
const { createBundleRenderer } = require('vue-server-renderer');

const env = process.env.NODE_ENV || 'development';
const isProd = env === 'production';

const appName = appConfig.name;
const appAlias = appConfig.alias;
const basePath = serverConfig.basePaths;

const app = express();
const resolve = file => path.resolve(__dirname, file);

// -----------------------------------------------------
// Add support for parsing cookies and form post data...
// -----------------------------------------------------
app.use(cookieParser());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// ----------------------------
// Enable session management...
// ----------------------------
const knexInstance = knex(dbSettings[env]);
const store = new DBStore({
  knex: knexInstance,
  tablename: 'auth_sessions',
});
app.use(session({
  name: `${appAlias}.sid`,
  secret: 'supadupasecret',
  resave: false,
  saveUninitialized: false,
  cookie: { secure: 'auto' },
  store,
}));

// ---------------------
// Load auth handlers...
// ---------------------
app.use('/auth', localAuthRoutes);

// ----------------
// Load data API...
// ----------------
app.use('/api', joint.router); // dynamic routes generated by Joint

// ------------------
// Prepare Vue SSR...
// ------------------
let renderer;
let readyPromise;
const template = fs.readFileSync(resolve('./src/index.template.html'), 'utf-8');

function createRenderer(bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(bundle, Object.assign(options, {
    template,
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15,
    }),
    basedir: resolve('./dist'), // this is only needed when vue-server-renderer is npm-linked
    runInNewContext: false, // recommended for performance
  }));
}
if (isProd) {
  // In production: create server renderer using built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundle = require('./dist/vue-ssr-server-bundle.json');
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  const clientManifest = require('./dist/vue-ssr-client-manifest.json');
  renderer = createRenderer(bundle, { clientManifest });
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(app, (bundle, options) => {
    renderer = createRenderer(bundle, options);
  });
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 1000 * 60 * 60 * 24 * 30 : 0,
});

app.use(compression({ threshold: 0 }));
app.use(favicon('./public/3d-box-48.png'));
app.use('/dist', serve('./dist', true));
app.use('/public', serve('./public', true));
app.use('/service-worker.js', serve('./dist/service-worker.js'));

const serverInfo = `express/${require('express/package.json').version} ` +
                   `vue-server-renderer/${require('vue-server-renderer/package.json').version}`;

function render(req, res) {
  res.setHeader('Content-Type', 'text/html');
  res.setHeader('Server', serverInfo);

  // Access requested URI...
  const requestedURI = req.url;

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url);
    } else if(err.code === 404) {
      res.status(404).end('404 | Page Not Found');
    } else {
      // Render Error Page or Redirect
      res.status(500).end('500 | Internal Server Error');
      console.error(`error during render : ${req.url}`);
      console.error(err.stack);
    }
  }

  // Access user session info...
  const authUserSession = req.session.user;
  const authAppUserSession = req.session.appUser;

  // Redirect unauthenticated requests for private pages to the home page...
  const isPrivate = (
    requestedURI.startsWith('/manage') ||
    requestedURI.startsWith('/admin')
  );
  if (isPrivate && !authUserSession) {
    return res.redirect('/');
  }

  // Prepare context for server-side handling...
  const context = {
    title: appAlias, // default title
    url: req.url,
    session: req.session,
    joint,
  };

  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err);
    }
    res.end(html);
  });
}

// -----------------
// Serve requests...
// -----------------
app.get('*', isProd ? render : (req, res) => {
  readyPromise.then(() => render(req, res));
});

// ---------------
// Start server...
// ---------------
const host = (isProd) ? serverConfig.host[env] : 'localhost';
const port = process.env.PORT || serverConfig.port[env];
app.listen(port, () => {
  console.info('================================');
  console.info(`${appName} is running`);
  console.info('--------------------------------');
  console.info(`host:  ${host}:${port}`);
  console.info(`alias: ${appAlias}`);
  console.info('================================');
  console.info('');
});
